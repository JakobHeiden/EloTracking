name: Deploy EloTracking

on:
  push:
    branches:
      - master

jobs:
  build-frontend: # hier folgt der Build-Prozess für das Frontend
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Use Node.js 14.x
        uses: actions/setup-node@v1
        with:
          node-version: 14.x
      - name: npm install frontend # nachfolgend werden Konsolenbefehle für diesen Build-Step ausgeführt (konkret: gehe in den "frontend"-Ordner und installiere alle npm-Abhängigkeiten)
        run: |
          cd frontend
          npm install
      - name: run build # nun folgt der Build-Prozess (es wird der "build"-Ordner erzeugt)
        run: |
          cd frontend
          npm run build
      - uses: actions/upload-artifact@v2 # die Upload Action ermöglicht das Bereitstellen des festgelegten Ordners (hier "frontend/build") und das Festlegen eines Namens (hier "frontend-build") für die spätere Verwendung
        with:
          name: frontend-build
          path: frontend/build/

  build-backend: # hier folgt der Build-Prozess für das Backend
    runs-on: ubuntu-latest
    needs: build-frontend
    steps:
      - uses: actions/checkout@v2
      - name: Set up JDK 17
        uses: actions/setup-java@v1
        with:
          java-version: 17
      - uses: actions/download-artifact@v2 # die Download Action ermöglicht das Verwenden des zuvor hochgeladenen Frontend-Builds
        with:
          name: frontend-build # hier wird das zuvor erstellte Frontend-Build spezifiziert
          path: backend/src/main/resources/static # um es dann in den genannten Ordner zu kopieren
      - name: Build with Maven
        run: mvn -B package -DskipTests --file backend/pom.xml
      - uses: actions/upload-artifact@v2 # das Backend-Build wird anschließend (so wie zuvor das Frontend-Build) via der Upload Action hochgeladen und steht weiteren Actions somit zur Verfügung
        with:
          name: elotracking.jar
          path: backend/target/elotracking.jar

  deploy:
    name: deploy to heroku
    runs-on: ubuntu-latest
    needs: build-backend
    steps:
      - uses: actions/checkout@v2
      - name: create target folder # bevor das Backend-Build hineinkopiert wird, wird das passende Verzeichnis erstellt
        run: mkdir backend/target
      - uses: actions/download-artifact@v2
        with:
          name: elotracking.jar # nun wird das Backend-Build angefordert
          path: backend/target # und in den spezifizierten Ordner kopiert
      - name: login to heroku container # es folgt nun das Login bei Heroku, welches durch einen API-Schlüssel erfolgt
        env:
          HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}
        run: heroku container:login
      - name: push docker container to heroku # nach dem Login wird das Backend-Build von Heroku automatisch in ein Docker-Image konvertiert und hochgeladen
        env:
          HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}
        run: heroku container:push web -a elotracking
      - name: deploy/release docker container to heroku # nach dem Hochladen wird das Docker-Image "deployed"/veröffentlicht
        env:
          HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}
        run: heroku container:release web -a elotracking
